#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
–ü–æ–¥—Å—á–∏—ÇÔøΩÔøΩ–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–æ/–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import psycopg2
import pandas as pd
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data_cleaning.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class DataCleaner:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = None
        self.cur = None
        self.cleaning_report = {
            'start_time': datetime.now().isoformat(),
            'operations': [],
            'summary': {},
            'end_time': None
        }
        
    def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = psycopg2.connect(
                host=os.getenv('DB_HOST', '103.246.146.132'),
                port=os.getenv('DB_PORT', 5432),
                database=os.getenv('DB_NAME', 'hackathon'),
                user=os.getenv('DB_USER', 'user_db'),
                password=os.getenv('DB_PASSWORD', 'psql14182025')
            )
            self.cur = self.conn.cursor()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
            
    def disconnect_db(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.cur:
            self.cur.close()
        if self.conn:
            self.conn.close()
        logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        
    def count_rows(self, table_name: str, condition: str = "") -> int:
        """–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º"""
        query = f"SELECT COUNT(*) FROM {table_name}"
        if condition:
            query += f" WHERE {condition}"
            
        self.cur.execute(query)
        return self.cur.fetchone()[0]
        
    def log_operation(self, operation_name: str, table_name: str, rows_before: int, 
                     rows_after: int, description: str, justification: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
        operation = {
            'operation': operation_name,
            'table': table_name,
            'rows_before': rows_before,
            'rows_after': rows_after,
            'rows_affected': rows_before - rows_after,
            'description': description,
            'justification': justification,
            'timestamp': datetime.now().isoformat()
        }
        
        self.cleaning_report['operations'].append(operation)
        
        logger.info(f"üìä {operation_name} | {table_name}")
        logger.info(f"   –î–æ: {rows_before:,} —Å—Ç—Ä–æ–∫")
        logger.info(f"   –ü–æ—Å–ª–µ: {rows_after:,} —Å—Ç—Ä–æ–∫") 
        logger.info(f"   –£–¥–∞–ª–µ–Ω–æ: {rows_before - rows_after:,} —Å—Ç—Ä–æ–∫")
        logger.info(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {justification}")
        
    def clean_duplicate_customers(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        table_name = "customers"
        operation_name = "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤"
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ –æ—á–∏—Å—Ç–∫–∏
        rows_before = self.count_rows(table_name)
        
        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ email
        duplicate_query = """
        WITH duplicates AS (
            SELECT email, MIN(id) as keep_id, COUNT(*) as count
            FROM customers 
            WHERE email IS NOT NULL AND email != ''
            GROUP BY email 
            HAVING COUNT(*) > 1
        )
        SELECT SUM(count - 1) FROM duplicates
        """
        
        self.cur.execute(duplicate_query)
        duplicates_count = self.cur.fetchone()[0] or 0
        
        if duplicates_count > 0:
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º ID)
            delete_query = """
            DELETE FROM customers 
            WHERE id NOT IN (
                SELECT MIN(id) 
                FROM customers 
                WHERE email IS NOT NULL AND email != ''
                GROUP BY email
            ) AND email IS NOT NULL AND email != ''
            """
            
            self.cur.execute(delete_query)
            self.conn.commit()
            
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        rows_after = self.count_rows(table_name)
        
        self.log_operation(
            operation_name, table_name, rows_before, rows_after,
            f"–£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ÔøΩÔøΩ–æ email",
            f"–î—É–±–ª–∏–∫–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏—Å–∫–∞–∂–∞—é—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –æ—à–∏–±–∫–∞–º –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö. "
            f"–û—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º ID –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ."
        )
        
    def clean_invalid_orders(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        table_name = "orders"
        operation_name = "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ –æ—á–∏—Å—Ç–∫–∏
        rows_before = self.count_rows(table_name)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
        delete_query = """
        DELETE FROM orders 
        WHERE id NOT IN (
            SELECT DISTINCT order_id 
            FROM order_items 
            WHERE order_id IS NOT NULL
        )
        """
        
        self.cur.execute(delete_query)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        delete_future_orders = """
        DELETE FROM orders 
        WHERE order_date > CURRENT_DATE
        """
        
        self.cur.execute(delete_future_orders)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ customer_id
        delete_orphan_orders = """
        DELETE FROM orders 
        WHERE customer_id NOT IN (
            SELECT id FROM customers WHERE id IS NOT NULL
        )
        """
        
        self.cur.execute(delete_orphan_orders)
        
        self.conn.commit()
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        rows_after = self.count_rows(table_name)
        
        self.log_operation(
            operation_name, table_name, rows_before, rows_after,
            "–£–¥–∞–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤, —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏—Å–∫–∞–∂–∞—é—Ç –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂. "
            "–ó–∞–∫–∞–∑—ã –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∏–º–µ—é—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏."
        )
        
    def clean_invalid_order_items(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤"""
        table_name = "order_items"
        operation_name = "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤"
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ –æ—á–∏—Å—Ç–∫–∏
        rows_before = self.count_rows(table_name)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –∏–ª–∏ —Ü–µ–Ω–∞–º–∏
        delete_query = """
        DELETE FROM order_items 
        WHERE quantity <= 0 
           OR unit_price < 0
           OR quantity IS NULL 
           OR unit_price IS NULL
           OR product_id NOT IN (SELECT id FROM products WHERE id IS NOT NULL)
        """
        
        self.cur.execute(delete_query)
        self.conn.commit()
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        rows_after = self.count_rows(table_name)
        
        self.log_operation(
            operation_name, table_name, rows_before, rows_after,
            "–£–¥–∞–ª–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏",
            "–ü–æ–∑–∏—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ "
            "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –∏—Å–∫–∞–∂–∞—é—Ç —Ä–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏."
        )
        
    def clean_inactive_products(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        table_name = "products"
        operation_name = "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ –æ—á–∏—Å—Ç–∫–∏
        rows_before = self.count_rows(table_name, "is_active = true")
        
        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
        deactivate_query = """
        UPDATE products 
        SET is_active = false, 
            updated_at = CURRENT_TIMESTAMP
        WHERE is_active = true 
          AND id NOT IN (
              SELECT DISTINCT oi.product_id 
              FROM order_items oi 
              JOIN orders o ON oi.order_id = o.id 
              WHERE o.order_date >= CURRENT_DATE - INTERVAL '12 months'
                AND oi.product_id IS NOT NULL
          )
          AND created_at < CURRENT_DATE - INTERVAL '12 months'
        """
        
        self.cur.execute(deactivate_query)
        self.conn.commit()
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        rows_after = self.count_rows(table_name, "is_active = true")
        
        self.log_operation(
            operation_name, table_name, rows_before, rows_after,
            "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤",
            "–ù–µ–∞ÔøΩÔøΩ—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—é—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏ —É—Å–ª–æ–∂–Ω—è—é—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É. "
            "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ."
        )
        
    def clean_test_data(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        operations = []
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        test_customers_before = self.count_rows("customers", 
            "email LIKE '%test%' OR email LIKE '%example%' OR name LIKE '%Test%'")
        
        if test_customers_before > 0:
            delete_test_customers = """
            DELETE FROM customers 
            WHERE email LIKE '%test%' 
               OR email LIKE '%example%' 
               OR name LIKE '%Test%'
               OR name LIKE '%test%'
            """
            self.cur.execute(delete_test_customers)
            
            test_customers_after = self.count_rows("customers", 
                "email LIKE '%test%' OR email LIKE '%example%' OR name LIKE '%Test%'")
            
            self.log_operation(
                "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", "customers", 
                test_customers_before, test_customers_after,
                "–£–¥–∞–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email –∏ –∏–º–µ–Ω–∞–º–∏",
                "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–∞–∂–∞—é—Ç —Ä–µ–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞."
            )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–∑–∞–∫–∞–∑—ã —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Å—É–º–º–∞–º–∏)
        test_orders_query = """
        SELECT COUNT(*) FROM orders o
        WHERE (
            SELECT COALESCE(SUM(oi.quantity * oi.unit_price), 0)
            FROM order_items oi 
            WHERE oi.order_id = o.id
        ) < 1
        """
        
        self.cur.execute(test_orders_query)
        test_orders_before = self.cur.fetchone()[0]
        
        if test_orders_before > 0:
            delete_test_orders = """
            DELETE FROM orders 
            WHERE id IN (
                SELECT o.id FROM orders o
                WHERE (
                    SELECT COALESCE(SUM(oi.quantity * oi.unit_price), 0)
                    FROM order_items oi 
                    WHERE oi.order_id = o.id
                ) < 1
            )
            """
            self.cur.execute(delete_test_orders)
            
            self.cur.execute(test_orders_query)
            test_orders_after = self.cur.fetchone()[0]
            
            self.log_operation(
                "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", "orders",
                test_orders_before, test_orders_after,
                "–£–¥–∞–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å —Å—É–º–º–æ–π –º–µ–Ω–µ–µ 1 —Ä—É–±–ª—è",
                "–ó–∞–∫–∞–∑—ã —Å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–º–∏ —Å—É–º–º–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏ –Ω–µ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏."
            )
        
        self.conn.commit()
        
    def update_computed_fields(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π...")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ updated_at –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        update_customers = """
        UPDATE customers 
        SET updated_at = CURRENT_TIMESTAMP 
        WHERE updated_at < created_at OR updated_at IS NULL
        """
        
        update_products = """
        UPDATE products 
        SET updated_at = CURRENT_TIMESTAMP 
        WHERE updated_at < created_at OR updated_at IS NULL
        """
        
        update_orders = """
        UPDATE orders 
        SET updated_at = CURRENT_TIMESTAMP 
        WHERE updated_at < created_at OR updated_at IS NULL
        """
        
        self.cur.execute(update_customers)
        self.cur.execute(update_products)
        self.cur.execute(update_orders)
        
        self.conn.commit()
        logger.info("‚úÖ –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_operations = len(self.cleaning_report['operations'])
        total_rows_affected = sum(op['rows_affected'] for op in self.cleaning_report['operations'])
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
        final_counts = {}
        tables = ['customers', 'orders', 'order_items', 'products']
        
        for table in tables:
            try:
                final_counts[table] = self.count_rows(table)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è {table}: {e}")
                final_counts[table] = 0
        
        self.cleaning_report['summary'] = {
            'total_operations': total_operations,
            'total_rows_affected': total_rows_affected,
            'final_table_counts': final_counts,
            'status': 'completed'
        }
        
        self.cleaning_report['end_time'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_filename = f"data_cleaning_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(self.cleaning_report, f, ensure_ascii=False, indent=2)
            
        logger.info(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        logger.info(f"   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        logger.info(f"   –°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_rows_affected:,}")
        logger.info(f"   –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
        logger.info(f"üìà –§–ò–ù–ê–õ–¨–ù–´–ï –°–ß–ï–¢–ß–ò–ö–ò –¢–ê–ë–õ–ò–¶:")
        for table, count in final_counts.items():
            logger.info(f"   {table}: {count:,} —Å—Ç—Ä–æ–∫")
            
    def run_cleaning(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üöÄ –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –î–ê–ù–ù–´–•")
            logger.info("=" * 50)
            
            self.connect_db()
            
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏
            cleaning_operations = [
                ("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.clean_test_data),
                ("–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤", self.clean_duplicate_customers),
                ("–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", self.clean_invalid_orders),
                ("–û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤", self.clean_invalid_order_items),
                ("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", self.clean_inactive_products),
                ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π", self.update_computed_fields)
            ]
            
            for operation_name, operation_func in cleaning_operations:
                logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {operation_name}")
                operation_func()
                logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {operation_name}")
                logger.info("-" * 30)
            
            self.generate_summary()
            
            logger.info("üéâ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            logger.info("=" * 50)
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï –î–ê–ù–ù–´–•: {e}")
            self.cleaning_report['summary'] = {
                'status': 'failed',
                'error': str(e)
            }
            raise
        finally:
            self.disconnect_db()

if __name__ == "__main__":
    cleaner = DataCleaner()
    cleaner.run_cleaning()
